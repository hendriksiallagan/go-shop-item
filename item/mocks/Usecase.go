// Code generated by mockery v1.0.0
package mocks

import (
	"context"
)
import "github.com/stretchr/testify/mock"
import "github.com/shop/models"

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}


func (_m *Usecase) Fetch(ctx context.Context, num int64) ([]*models.Item, error) {
	ret := _m.Called(ctx, num)

	var r0 []*models.Item
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*models.Item); ok {
		r0 = rf(ctx, num)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Item)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, int64) error); ok {
		r2 = rf(ctx, num)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r2
}

func (_m *Usecase) Calculate(ctx context.Context, id int64) (*models.Calculate, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Calculate
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.Calculate); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Calculate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *Usecase) Store(_a0 context.Context, _a1 *models.Item) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Item) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
